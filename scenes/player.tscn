[gd_scene load_steps=7 format=3 uid="uid://bx0oqtvk82pyq"]

[ext_resource type="Texture2D" uid="uid://bg2nsltc383m6" path="res://assets/Sprite-0001-Sheet.png" id="2_qw56i"]

[sub_resource type="GDScript" id="GDScript_5cdeg"]
resource_name = "player"
script/source = "extends CharacterBody2D

@export var SPEED: float = 150.0
@export var JUMP_VELOCITY: float = -200.0
@export var AIR_BRAKE: float = 0.75

@export var GRAVITY_UP_FACTOR: float = 0.85 # when before jump apex
@export var GRAVITY_DOWN_FACTOR: float = 1.25 # when past jump apex
@export var TERMINAL_VELOCITY_MULTIPLIER: float = 3 # when in free fall
@export var TERMINAL_VELOCITY_DURATION_MAX: float = 0.5 # how long until terminal velocity acts
var terminal_duration: float

# This is a perfect case for a state machine (2 states - on floor / not on floor) and 
# a transition (on floor -> not on floor)
@export var JUMP_SQUISH_FACTOR: float = 0.175 # transform the sprite when jumping; both x & y
@export var SQUISH_TIME: float = 0.10 # transform duration

# This is a perfect case for a state machine (2 states - on floor / not on floor) and 
# a transition (not on floor -> on floor)
@export var LAND_SQUISH_FACTOR_X: float = 0.45
@export var LAND_SQUISH_FACTOR_Y: float = 0.25 # transform the sprite when landing

@export var COYOTE_MAX_TIME: float = 0.15 # coyote go brrrr
var is_coyote_time: bool
var coyote_time: float

@export var JUMP_BUFFER_DURATION: float = 0.1
var jump_timer: float
var is_jump_buffered: bool

@export var ACCEL_TIME: float = 0.1
@export var BREAK_FACTOR: float = 5.5 # when decelerating; 

var ACCEL: float = SPEED / ACCEL_TIME
var accel_speed: float

@onready var sprite: AnimatedSprite2D = $PlayerAnimatedSprite2D

# Get the gravity from the project settings to be synced with RigidBody nodes.
var gravity = ProjectSettings.get_setting(\"physics/2d/default_gravity\")

enum States {ON_FLOOR, IN_AIR, BUFFER}
var _state : int = States.ON_FLOOR

var allow_input: bool = true

func change_state(new_state: int, jump_timer: float = 0.0) -> void:
	var _previous_state := _state
	_state = new_state
	match _state:
		States.ON_FLOOR:
			pass
		States.IN_AIR:
			is_jump_buffered = false
		States.BUFFER:
			is_coyote_time = false
			if jump_timer < JUMP_BUFFER_DURATION:
				is_jump_buffered = true
			else:
				is_jump_buffered = false

# new bug has dropped
# it is possible to trigger jump 2 times if you press the key very fast

func _physics_process(delta):
	# Add the gravity.
	# Define what a jump/land is: player is on the floor and presses spacebar/player is in air and touches floor
	var is_jumping: bool = _state == States.ON_FLOOR and allow_input and Input.is_action_just_pressed(\"jump\")
	var is_landed: bool = ( _state == States.IN_AIR or _state == States.BUFFER ) and is_on_floor()
	var is_buffer: bool = _state == States.IN_AIR and allow_input and Input.is_action_just_pressed(\"jump\") and not is_coyote_time  # THIS IS WHERE THE COYOTE TIME BUG WAS OMG!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	var is_falling: bool = velocity.y > 0 and not is_jumping 
	if _state == States.BUFFER:
		jump_timer += delta
		#is_coyote_time = false # THIS IS WHERE THE COYOTE TIME BUG WAS OMG!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	
	if _state == States.IN_AIR and is_falling:
		terminal_duration += delta

	if is_landed:
		terminal_duration = 0.0
		coyote_time = 0.0
		change_state(0)
		_squish_land()
		if is_jump_buffered:
			_jump()
		
	if is_jumping:
		change_state(1)
		_squish_jump()

	if is_buffer:
		change_state(2, jump_timer)
		jump_timer = 0.0
		
	if is_on_floor():
		is_coyote_time = true

	if is_falling:
		change_state(1)
			
	if not is_on_floor():
		coyote_time += delta
		if coyote_time > COYOTE_MAX_TIME:
			is_coyote_time = false
			coyote_time = 0.0
		
		if velocity.y < 0:
			velocity.y += gravity * delta * GRAVITY_UP_FACTOR
		if velocity.y >= 0:
			velocity.y += gravity * delta * GRAVITY_DOWN_FACTOR
		if velocity.y >= 0 and terminal_duration > TERMINAL_VELOCITY_DURATION_MAX:
			velocity.y += gravity * delta * TERMINAL_VELOCITY_MULTIPLIER

	# How to implement different gravity in an arc shape?
	# the player has a position Y, when they jump, Y increases
	# at one point, Y reaches the maximum
	# immediately after, y starts to decrease according to the gravity setting
	# therefore, I need to identify the point when Y is max
	# and decrease Y faster starting with that point and ending with touching the floor
	
	# Solution: velocity.y is always negative while going up, and then positive while falling

	# Terminal velocity while falling
	velocity.y = clamp(velocity.y, JUMP_VELOCITY * GRAVITY_UP_FACTOR, -JUMP_VELOCITY * TERMINAL_VELOCITY_MULTIPLIER * GRAVITY_DOWN_FACTOR)

	# Handle jump.
	if ( Input.is_action_just_pressed(\"jump\") ) and ( is_on_floor() or is_coyote_time ) and allow_input:
		change_state(1)
		_jump()


	# Get the input direction and handle the movement/deceleration.
	# As good practice, you should replace UI actions with custom gameplay actions.
	var direction = Input.get_axis(\"left\", \"right\")
	
	if direction and allow_input:
		# Acceleration
		accel_speed += ACCEL * delta
		if accel_speed > SPEED:
			accel_speed = SPEED

		velocity.x = accel_speed * direction
		velocity.x = clamp(velocity.x, -SPEED, SPEED)
	else:
		# Deceleration
		accel_speed = 0.0
		velocity.x = move_toward(velocity.x, 0, SPEED / BREAK_FACTOR)

	move_and_slide()

func _jump():
		velocity.y = JUMP_VELOCITY
		is_coyote_time = false
		is_jump_buffered = false
		coyote_time = 0.0
		#terminal_duration = 0.0

# Squish sprite when jumping
func _squish_jump():
	sprite.scale.x = move_toward(sprite.scale.x, sprite.scale.x + JUMP_SQUISH_FACTOR, JUMP_SQUISH_FACTOR)
	sprite.scale.y = move_toward(sprite.scale.y, sprite.scale.y - JUMP_SQUISH_FACTOR, JUMP_SQUISH_FACTOR)
	await get_tree().create_timer(SQUISH_TIME).timeout
	sprite.scale.x = move_toward(sprite.scale.x, 1, JUMP_SQUISH_FACTOR)
	sprite.scale.y = move_toward(sprite.scale.y, 1, JUMP_SQUISH_FACTOR)
	
func _squish_land():
	sprite.scale.x = move_toward(sprite.scale.x, sprite.scale.x + LAND_SQUISH_FACTOR_X, LAND_SQUISH_FACTOR_X)
	sprite.scale.y = move_toward(sprite.scale.y, sprite.scale.y - LAND_SQUISH_FACTOR_Y, LAND_SQUISH_FACTOR_Y)
	await get_tree().create_timer(SQUISH_TIME).timeout
	sprite.scale.x = move_toward(sprite.scale.x, 1, LAND_SQUISH_FACTOR_X)
	sprite.scale.y = move_toward(sprite.scale.y, 1, LAND_SQUISH_FACTOR_Y)
"

[sub_resource type="RectangleShape2D" id="RectangleShape2D_6l5xa"]

[sub_resource type="AtlasTexture" id="AtlasTexture_ew3ru"]
atlas = ExtResource("2_qw56i")
region = Rect2(0, 0, 32, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_f8kgs"]
atlas = ExtResource("2_qw56i")
region = Rect2(32, 0, 32, 32)

[sub_resource type="SpriteFrames" id="SpriteFrames_7kjki"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_ew3ru")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_f8kgs")
}],
"loop": false,
"name": &"new_animation",
"speed": 5.0
}]

[node name="Player" type="Node2D"]

[node name="CharacterBody2D" type="CharacterBody2D" parent="."]
script = SubResource("GDScript_5cdeg")
SPEED = 550.0
JUMP_VELOCITY = -400.0
COYOTE_MAX_TIME = 0.1
JUMP_BUFFER_DURATION = 0.15

[node name="CollisionShape2D" type="CollisionShape2D" parent="CharacterBody2D"]
shape = SubResource("RectangleShape2D_6l5xa")

[node name="PlayerAnimatedSprite2D" type="AnimatedSprite2D" parent="CharacterBody2D"]
texture_filter = 3
position = Vector2(0, 10)
sprite_frames = SubResource("SpriteFrames_7kjki")
animation = &"new_animation"
autoplay = "new_animation"
frame = 1
frame_progress = 1.0
offset = Vector2(0, -14.795)
